#########################
#### Procedure 10 #####
#########################
### Specific parameter values are used for the experiments. It can be changed based on one requirement.
#######################################################################################################

create or replace procedure wp_10(in dmsInfo integer)
as begin
	
	declar e dms integer;
	
	Declare v5 table(
						item_sk integer, 
						web_sales decimal,
						store_sales decimal, 
						web_cumulative decimal, 
						store_cumulative decimal
						);
	
	dms := :dmsInfo;
	
	v1 = 
			select 
					ws_item_sk item_sk, 
					ws_sales_price, 
					ws_item_sk, 
					ws_sold_date_sk 
			from 
					web_sales 
			where 
					ws_item_sk is not NULL ;
	
	v2 = 
			select 
					ss_item_sk item_sk , 
					ss_sold_date_sk, 
					ss_item_sk, 
					ss_sales_price 
			from 
					store_sales 
			where 
					ss_item_sk is not NULL ;
	
	while (:dms < 1209) DO
		
		web_v1 = 
				select 
						d_date, 
						sum(sum(ws_sales_price)) 
						over (
								partition by 
											item_sk 
								order by 
											d_date rows between unbounded preceding and current row
							)cume_sales , 
						item_sk 
				from 
						:v1, 
						date_dim 
				where 
						ws_sold_date_sk=d_date_sk 
						and d_month_seq between :dms and :dms + 11 
				group by 
						item_sk, 
						d_date;
		
		store_v1 = 
				select 
						d_date, 
						sum(sum(ss_sales_price)) 
						over (
								partition by 
											ss_item_sk 
								order by 
											d_date rows between unbounded preceding and current row
							) cume_sales , 
						item_sk 
				from 
						:v2 ,
						date_dim 
				where 
						ss_sold_date_sk=d_date_sk 
						and d_month_seq between :dms and :dms + 11  
				group by 
						ss_item_sk, 
						d_date, 
						item_sk;
		
		v3 = 
				select 
						case 
							when 
								web.item_sk is not null 
							then 
								web.item_sk 
							else 
								store.item_sk 
							end item_sk, 
						case 
							when 
								web.d_date is not null 
							then 
								web.d_date 
							else 
								store.d_date 
							end d_date, 
						web.cume_sales web_sales, 
						store.cume_sales store_sales 
				from 
						:web_v1 web 
						full outer join :store_v1 store on (
															web.item_sk = store.item_sk 
															and web.d_date = store.d_date
															);
		
		v4 = 
				select 
						item_sk ,
						web_sales ,
						store_sales, 
						max(web_sales) over (
												partition by 
															item_sk 
												order by 
															d_date rows between unbounded preceding and current row
											) web_cumulative ,
						max(store_sales) over (
												partition by 
															item_sk 
												order by 
															d_date rows between unbounded preceding and current row
												) store_cumulative 
				from 
						:v3;
		
		v5 = 
				select * 
				from :v5 
				
				UNION ALL (
							select 
									* 
							from 
									:v4 
							where 
									web_cumulative > store_cumulative 
							order by 
									item_sk
							);
		
		dms = :dms + 1;
	
	end while;
	
	select 
			avg(store_sales) sales 
	from 
			:v5;
end;
